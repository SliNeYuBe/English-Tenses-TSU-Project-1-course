from aiogram import F, Router
from aiogram.filters import CommandStart
from aiogram.types import Message, CallbackQuery

import app.database.request as rq
import app.keyboards as kb
from app.keyboards import test_choose, main_kb

router = Router()


tenses = ''

@router.message(CommandStart())
async def cmd_start(message: Message):
    await rq.set_user(message.from_user.id, message.from_user.full_name)
    await message.answer(f'–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {message.from_user.full_name}!',
                         reply_markup=await main_kb(message.from_user.id))


@router.message(F.text == '–ü—Ä–æ—Ñ–∏–ª—å')
async def profile(message: Message):
    test = await rq.get_profile(message.from_user.id)
    if '‚úÖ' in test.achievements_past and '‚úÖ' in test.achievements_present and '‚úÖ' in test.achievements_future:
        await message.answer(
            f'üïó –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –ü–æ–≤–µ–ª–∏—Ç–µ–ª—å –≤—Ä–µ–º–µ–Ω–∏ {message.from_user.full_name}! üïó\n\n–ê—á–∏–≤–∫–∏:\n\n{test.achievements_past[:2]} Past Tense: {test.achievements_past[3:]}'
            f'\n\n{test.achievements_present[:2]} Present Tense: {test.achievements_present[3:]}'
            f'\n\n{test.achievements_future[:2]} Future Tense: {test.achievements_future[3:]}')
    else:
        await message.answer(
            f'–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {message.from_user.full_name}!\n\n–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è:\n\n{test.achievements_past[:2]} Past Tense: {test.achievements_past[3:]}'
            f'\n\n{test.achievements_present[:2]} Present Tense: {test.achievements_present[3:]}'
            f'\n\n{test.achievements_future[:2]} Future Tense: {test.achievements_future[3:]}')


@router.message(F.text == '–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å')
async def feedback(message: Message):
    await message.answer('–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –æ—à–∏–±–∫–∏, –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∏–¥–µ—é –¥–ª—è –¥–æ—Ä–∞–±–æ—Ç–∫–∏ –±–æ—Ç–∞, –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫–æ –º–Ω–µ –≤ –ª—Å: @SliNeYuBe',
    reply_markup=await main_kb(message.from_user.id))


@router.message(F.text == '–õ–µ–∫—Ü–∏–∏')
async def lectures(message: Message):
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è, –∫–æ—Ç–æ—Ä–æ–µ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç: ', reply_markup=kb.time)


@router.callback_query(F.data == 'past')
async def category_past(callback: CallbackQuery):
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –ø–æ–¥–≥—Ä—É–ø–ø –≤—Ä–µ–º–µ–Ω–∏ Past: ", reply_markup=kb.category_past)


@router.callback_query(F.data == 'past_simple')
async def category_past_simple(callback: CallbackQuery):
    global tenses
    tenses = 'Past Simple'
    await callback.message.delete()
    await callback.message.answer_photo(
        photo='https://optim.tildacdn.com/tild3734-3238-4538-b338-323135666661/-/format/webp/__2023-01-13__231709.png',
        caption='–ö–∞–∫ —Å–æ—Å—Ç–∞–≤–∏—Ç—å Positive/Negative/Question –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è'
    )
    await callback.message.answer('–í—Å–µ —á—Ç–æ –Ω—É–∂–Ω–æ –ø–æ Past Simple:\n\nhttps://www.native-english.ru/grammar/past-simple',
                                  reply_markup=kb.main_or_test)


@router.callback_query(F.data == 'past_continuous')
async def category_past_simple(callback: CallbackQuery):
    global tenses
    tenses = 'Past Continuous'
    await callback.message.delete()
    await callback.message.answer_photo(
        photo='https://optim.tildacdn.com/tild6136-3835-4135-a231-363335653436/-/format/webp/__2023-01-13__232636.png',
        caption='–ö–∞–∫ —Å–æ—Å—Ç–∞–≤–∏—Ç—å Positive/Negative/Question –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è'
    )
    await callback.message.answer(
        '–í—Å–µ —á—Ç–æ –Ω—É–∂–Ω–æ –ø–æ Past Continuous:\n\nhttps://www.native-english.ru/grammar/past-continuous',
        reply_markup=kb.main_or_test)


@router.callback_query(F.data == 'past_perfect')
async def category_past_simple(callback: CallbackQuery):
    global tenses
    tenses = 'Past Perfect'
    await callback.message.delete()
    await callback.message.answer_photo(
        photo='https://optim.tildacdn.com/tild3537-6135-4233-a361-663930313833/-/format/webp/__2023-01-13__233236.png',
        caption='–ö–∞–∫ —Å–æ—Å—Ç–∞–≤–∏—Ç—å Positive/Negative/Question –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è'
    )
    await callback.message.answer(
        '–í—Å–µ —á—Ç–æ –Ω—É–∂–Ω–æ –ø–æ Past Perfect:\n\nhttps://www.native-english.ru/grammar/past-perfect',
        reply_markup=kb.main_or_test)


@router.callback_query(F.data == 'past_perfect_continuous')
async def category_past_simple(callback: CallbackQuery):
    global tenses
    tenses = 'Past Perfect Continuous'
    await callback.message.delete()
    await callback.message.answer_photo(
        photo='https://optim.tildacdn.com/tild6565-3033-4261-b530-313332656337/-/format/webp/__2023-01-13__233823.png',
        caption='–ö–∞–∫ —Å–æ—Å—Ç–∞–≤–∏—Ç—å Positive/Negative/Question –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è'
    )
    await callback.message.answer(
        '–í—Å–µ —á—Ç–æ –Ω—É–∂–Ω–æ –ø–æ Past Perfect Continuous:\n\nhttps://www.native-english.ru/grammar/past-perfect-continuous',
        reply_markup=kb.main_or_test)


@router.callback_query(F.data == 'present')
async def category_past(callback: CallbackQuery):
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –ø–æ–¥–≥—Ä—É–ø–ø –≤—Ä–µ–º–µ–Ω–∏ Present: ", reply_markup=kb.category_present)


@router.callback_query(F.data == 'present_simple')
async def category_past_simple(callback: CallbackQuery):
    global tenses
    tenses = 'Present Simple'
    await callback.message.delete()
    await callback.message.answer_photo(
        photo='https://optim.tildacdn.com/tild3235-3061-4564-a665-363537346661/-/format/webp/__2023-01-13__231353.png',
        caption='–ö–∞–∫ —Å–æ—Å—Ç–∞–≤–∏—Ç—å Positive/Negative/Question –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è'
    )
    await callback.message.answer(
        '–í—Å–µ —á—Ç–æ –Ω—É–∂–Ω–æ –ø–æ Present Simple:\n\nhttps://www.native-english.ru/grammar/present-simple',
        reply_markup=kb.main_or_test)


@router.callback_query(F.data == 'present_continuous')
async def category_past_simple(callback: CallbackQuery):
    global tenses
    tenses = 'Present Continuous'
    await callback.message.delete()
    await callback.message.answer_photo(
        photo='https://optim.tildacdn.com/tild3962-3761-4565-b962-393737393438/-/format/webp/__2023-01-13__232253.png',
        caption='–ö–∞–∫ —Å–æ—Å—Ç–∞–≤–∏—Ç—å Positive/Negative/Question –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è'
    )
    await callback.message.answer(
        '–í—Å–µ —á—Ç–æ –Ω—É–∂–Ω–æ –ø–æ Present Continuous:\n\nhttps://www.native-english.ru/grammar/present-continuous',
        reply_markup=kb.main_or_test)


@router.callback_query(F.data == 'present_perfect')
async def category_past_simple(callback: CallbackQuery):
    global tenses
    tenses = 'Present Perfect'
    await callback.message.delete()
    await callback.message.answer_photo(
        photo='https://optim.tildacdn.com/tild6662-3537-4564-b934-373865633539/-/format/webp/__2023-01-13__233010.png',
        caption='–ö–∞–∫ —Å–æ—Å—Ç–∞–≤–∏—Ç—å Positive/Negative/Question –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è'
    )
    await callback.message.answer(
        '–í—Å–µ —á—Ç–æ –Ω—É–∂–Ω–æ –ø–æ Present Perfect:\n\nhttps://www.native-english.ru/grammar/present-perfect',
        reply_markup=kb.main_or_test)


@router.callback_query(F.data == 'present_perfect_continuous')
async def category_past_simple(callback: CallbackQuery):
    global tenses
    tenses = 'Present Perfect Continuous'
    await callback.message.delete()
    await callback.message.answer_photo(
        photo='https://optim.tildacdn.com/tild6538-3938-4238-b439-656133633661/-/format/webp/__2023-01-13__233719.png',
        caption='–ö–∞–∫ —Å–æ—Å—Ç–∞–≤–∏—Ç—å Positive/Negative/Question –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è'
    )
    await callback.message.answer(
        '–í—Å–µ —á—Ç–æ –Ω—É–∂–Ω–æ –ø–æ Present Perfect Continuous:\n\nhttps://www.native-english.ru/grammar/present-perfect-continuous',
        reply_markup=kb.main_or_test)


@router.callback_query(F.data == 'future')
async def category_past(callback: CallbackQuery):
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –ø–æ–¥–≥—Ä—É–ø–ø –≤—Ä–µ–º–µ–Ω–∏ Future: ", reply_markup=kb.category_future)


@router.callback_query(F.data == 'future_simple')
async def category_past_simple(callback: CallbackQuery):
    global tenses
    tenses = 'Future Simple'
    await callback.message.delete()
    await callback.message.answer_photo(
        photo='https://optim.tildacdn.com/tild3763-3135-4730-b732-663437326638/-/format/webp/__2023-01-13__231938.png',
        caption='–ö–∞–∫ —Å–æ—Å—Ç–∞–≤–∏—Ç—å Positive/Negative/Question –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è'
    )
    await callback.message.answer(
        '–í—Å–µ —á—Ç–æ –Ω—É–∂–Ω–æ –ø–æ Future Simple:\n\nhttps://www.native-english.ru/grammar/future-simple',
        reply_markup=kb.main_or_test)


@router.callback_query(F.data == 'future_continuous')
async def category_past_simple(callback: CallbackQuery):
    global tenses
    tenses = 'Future Continuous'
    await callback.message.delete()
    await callback.message.answer_photo(
        photo='https://optim.tildacdn.com/tild6461-3335-4365-a563-366431343530/-/format/webp/__2023-01-13__232847.png',
        caption='–ö–∞–∫ —Å–æ—Å—Ç–∞–≤–∏—Ç—å Positive/Negative/Question –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è'
    )
    await callback.message.answer(
        '–í—Å–µ —á—Ç–æ –Ω—É–∂–Ω–æ –ø–æ Future Continuous:\n\nhttps://www.native-english.ru/grammar/future-continuous',
        reply_markup=kb.main_or_test)


@router.callback_query(F.data == 'future_perfect')
async def category_past_simple(callback: CallbackQuery):
    global tenses
    tenses = 'Future Perfect'
    await callback.message.delete()
    await callback.message.answer_photo(
        photo='https://optim.tildacdn.com/tild6232-3137-4534-b665-343837626361/-/format/webp/__2023-01-13__233433.png',
        caption='–ö–∞–∫ —Å–æ—Å—Ç–∞–≤–∏—Ç—å Positive/Negative/Question –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è'
    )
    await callback.message.answer(
        '–í—Å–µ —á—Ç–æ –Ω—É–∂–Ω–æ –ø–æ Future Perfect:\n\nhttps://www.native-english.ru/grammar/future-perfect',
        reply_markup=kb.main_or_test)


@router.callback_query(F.data == 'future_perfect_continuous')
async def category_past_simple(callback: CallbackQuery):
    global tenses
    tenses = 'Future Perfect Continuous'
    await callback.message.delete()
    await callback.message.answer_photo(
        photo='https://optim.tildacdn.com/tild6230-3030-4631-b632-643964653561/-/format/webp/__2023-01-13__233948.png',
        caption='–ö–∞–∫ —Å–æ—Å—Ç–∞–≤–∏—Ç—å Positive/Negative/Question –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è'
    )
    await callback.message.answer(
        '–í—Å–µ —á—Ç–æ –Ω—É–∂–Ω–æ –ø–æ Future Perfect Continuous:\n\nhttps://www.native-english.ru/grammar/future-perfect-continuous',
        reply_markup=kb.main_or_test)


@router.callback_query(F.data == 'to_time')
async def category_time(callback: CallbackQuery):
    await callback.message.answer('–î–ª—è –Ω–∞—á–∞–ª–∞ —Ç–µ—Å—Ç–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É —Å –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ–º –≤—Ä–µ–º–µ–Ω–∏. –ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–ª–∏, –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –æ–±—Ä–∞—Ç–Ω–æ –≤ –º–µ–Ω—é',
                                  reply_markup= await test_choose(tenses))


@router.message(F.text == '–ù–∞–∑–∞–¥')
async def to_return(message: Message):
    await message.answer('–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=await main_kb(message.from_user.id))


@router.message(F.text == '–¢–µ—Å—Ç—ã')
async def choose_test(message: Message):
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ —Ç–µ—Å—Ç–æ–≤: ', reply_markup=kb.tests)


@router.message(F.text == 'Past')
async def choose_past(message: Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ —Ç–µ–º Past: ", reply_markup=kb.past)


@router.message(F.text == 'Present')
async def choose_past(message: Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ —Ç–µ–º Present: ", reply_markup=kb.present)


@router.message(F.text == 'Future')
async def choose_past(message: Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ —Ç–µ–º Future: ", reply_markup=kb.future)


@router.callback_query(F.data == 'back_time')
async def back_time(callback: CallbackQuery):
    await callback.message.answer(text='–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –æ–±—Ä—Ç–∞–Ω–æ –∫ –≤—Ä–µ–º–µ–Ω–∞–º', reply_markup=kb.time)
